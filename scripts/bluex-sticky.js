(() => { var f = Object.create; var o = Object.defineProperty; var m = Object.getOwnPropertyDescriptor; var k = Object.getOwnPropertyNames; var y = Object.getPrototypeOf, g = Object.prototype.hasOwnProperty; var p = i => o(i, "__esModule", { value: !0 }); var b = (i, t) => () => (t || i((t = { exports: {} }).exports, t), t.exports); var E = (i, t, e) => { if (t && typeof t == "object" || typeof t == "function") for (let s of k(t)) !g.call(i, s) && s !== "default" && o(i, s, { get: () => t[s], enumerable: !(e = m(t, s)) || e.enumerable }); return i }, w = i => E(p(o(i != null ? f(y(i)) : {}, "default", i && i.__esModule && "default" in i ? { get: () => i.default, enumerable: !0 } : { value: i, enumerable: !0 })), i); var d = b((A, h) => { var l = class { static triggerEvent(t, e) { let s; typeof Event == "function" ? s = new Event(e) : (s = document.createEvent("Event"), s.initEvent(e, !0, !0)), t.dispatchEvent(s) } static getElementByAttribute(t, e) { return e ? document.querySelector(`[${t}="${e}"]`) : document.querySelector(`[${t}]`) } static getElementsByAttribute(t, e) { return e ? document.querySelectorAll(`[${t}="${e}"]`) : document.querySelectorAll(`[${t}]`) } static getElementByAttributeWithinElement(t, e, s) { return s ? t.querySelector(`[${e}="${s}"]`) : t.querySelector(`[${e}]`) } static isMouseOver(t) { return Array.prototype.slice.call(t.parentElement.querySelectorAll(":hover")).filter(function () { return t[0] == this }).length > 0 } static getElementsByAttributeWithinElement(t, e, s) { return s ? t.querySelectorAll(`[${e}="${s}"]`) : t.querySelectorAll(`[${e}]`) } static getElementByClassWithinElement(t, e) { return t.querySelector(`.${e}`) } static maxWidthMobileViewports() { return 940 } static createEvent(t) { let e; return typeof Event == "function" ? e = new Event(t) : (e = document.createEvent("Event"), e.initEvent(t, !0, !0)), e } static isDesktop() { return Math.max(document.documentElement.clientWidth, window.innerWidth || 0) > this.maxWidthMobileViewports() } static isIE11() { return navigator.userAgent.indexOf("MSIE") !== -1 || navigator.appVersion.indexOf("Trident/") > -1 } static getKeyCodeOnKeyDownEvent(t) { let e; if (t != null) if (typeof t.code == "undefined") switch (t.keyCode) { case 13: e = "Enter"; break; case 38: e = "ArrowUp"; break; case 40: e = "ArrowDown"; break; case 8: e = "Backspace"; break; case 9: e = "Tab"; break; case 27: e = "Escape"; break; case 33: e = "PageUp"; break; case 34: e = "PageDown"; break; case 32: e = "Space"; break; default: e = void 0; break } else e = t.code; return e } static getKeyboardFocusableElements(t) { let e = s => window.getComputedStyle(s).visibility === "hidden"; return [...t.querySelectorAll('a[href], button, input, textarea, iframe, select, details,[tabindex]:not([tabindex="-1"])')].filter(s => !e(s) && !s.hasAttribute("disabled") && !s.getAttribute("aria-hidden")) } }; h.exports = l }); var u = w(d()), a = "data-rs-bluex-sticky", r = class { constructor(t) { if (this.element = t, this.stick = !1, this.animation = !1, this.elementHeight = this.element.offsetHeight, this.handleScroll = this.handleScroll.bind(this), this.stickPoint = this.getOffset(this.element), this.stickAnimate = t.getAttribute(this.attributes.animate), this.stickyGhostBox = document.createElement("div"), t.getAttribute("id")) { let e = `sticky-ghost-box__${t.getAttribute("id")}`; this.stickyGhostBox.classList.add(e) } if (this.stickyGhostBox.classList.add("sticky-ghost-box"), this.element.parentNode.insertBefore(this.stickyGhostBox, this.element), this.stickAnimate && (this.stickPoint = this.stickPoint + this.elementHeight, this.element.classList.add(this.classes.animate)), t.getAttribute(this.attributes.background)) { let e = `bg-brand--${t.getAttribute(this.attributes.background)}`; this.stickyGhostBox.classList.add(e) } this.handleScroll(), this.addEventHandlers() } get classes() { return { sticky: "sticky", animate: "sticky--animate" } } get attributes() { return { animate: `${a}-animate`, background: `${a}-bg` } } addEventHandlers() { "wheel" in window ? document.addEventListener("wheel", this.handleScroll, !0) : document.addEventListener("scroll", this.handleScroll, !0) } handleScroll(t) { let e = 0; this.stickAnimate && (e = 35, u.default.isDesktop() || (e = 30)), this.stickPoint - e < window.pageYOffset && !this.stick && (this.stick = !0, this.element.classList.add(this.classes.sticky), this.stickyGhostBox.style.height = this.elementHeight + "px"), this.stickPoint - e > window.pageYOffset && this.stick && (this.stick = !1, this.element.classList.remove(this.classes.sticky), this.element.classList.remove("drop-down"), this.element.classList.remove("drop-up"), this.stickyGhostBox.style.height = "0px"), this.stickPoint < window.pageYOffset && !this.animation && (this.animation = !0, this.element.classList.add("drop-down"), this.element.classList.remove("drop-up")), this.stickPoint > window.pageYOffset && this.animation && (this.animation = !1, this.element.classList.remove("drop-down"), this.element.classList.add("drop-up")) } getOffset(t) { let e = this; return t ? e.getOffset(t.offsetParent) + t.offsetTop : 0 } static getSelector() { return `[${a}]` } }; var c = document.querySelectorAll(r.getSelector()); if (c.length) for (n = 0; n < c.length; n++)new r(c[n]); var n; })();